#ifndef C_FLIR_ONE_CONTROL_H
#define C_FLIR_ONE_CONTROL_H

//****************************************************************************************************
// ласс управлени€ Flir One
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <stdint.h>
#include <memory>
#include <string>
#include <vector>
#include "cthread.h"
#include "cmutexobject.h"
#include "cflironereceiver.h"
#include "cflironedriver.h"

//****************************************************************************************************
//макроопределени€
//****************************************************************************************************

//бесконечное малое
#define EPS 0.00000001

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объ€влени€
//****************************************************************************************************

//****************************************************************************************************
// ласс управлени€ Flir One
//****************************************************************************************************
class CFlirOneControl
{
 friend void* ThreadFunction(void *ptr);//поток обработки
 public:
  //-перечислени€---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------  
 private:
  //-переменные-----------------------------------------------------------------------------------------
  struct SProtected
  {
   CMutexObject cMutex;//мютекс дл€ доступа к данным
   bool ExitThread;//необходимость завершени€ потока
   CFlirOneReceiver cFlirOneReceiver;//класс приЄма данных от Flir One
  } sProtected;//защищЄнные переменные
  CFlirOneDriver cFlirOneDriver;//класс драйверов дл€ Flir One
  CThread cThread_Processing;//поток обработки
  int32_t Delay;//пауза дл€ работы потока
  std::vector<uint8_t> ReceiveBuffer;//буфер приЄма данных
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CFlirOneControl(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CFlirOneControl();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  bool Open(void);//подключитьс€ к устройству
  void Close(void);//отключитьс€ от устройства
  bool LoadColorMap(const std::string &filename);//загрузить карту перекодировки изображени€
  bool CopyColorImage(std::vector<uint32_t> &image,uint32_t &index);//скопировать раскрашенное изображение в буфер
  bool CopyThermalImage(std::vector<uint16_t> &image,uint32_t &index);//скопировать тепловое изображение в буфер
  bool CopyVideoImage(std::vector<uint32_t> &image,uint32_t &index);//скопировать изображение с видеокамеры в буфер
  bool CopyColorMap(uint8_t R[CFlirOneReceiver::COLOR_MAP_UNIT],uint8_t G[CFlirOneReceiver::COLOR_MAP_UNIT],uint8_t B[CFlirOneReceiver::COLOR_MAP_UNIT],uint32_t size);//скопировать палитру
  void SetShowVideo(bool state);//показывать ли видео
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  bool Processing(void);//обработка (вызываетс€ только потоком)
  void StartThread(void);//запустить поток
  void StopThread(void);//остановить поток
};

#endif
